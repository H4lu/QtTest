#include "mainwindow.h"
#include "ui_mainwindow.h"


#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QUrlQuery>
#include <QNetworkReply>
#include <QUrl>
#include <QDebug>

#include <QTimer>
#include <jsonparser.h>


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    this->networkManager = new QNetworkAccessManager();
    this->networkManager->connectToHostEncrypted("https://chain.so/api/v2/");
    // txData = new QVector<QString>;
    numTX=0;
    curTX =0;
    connect(ui->listView, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemAddress(QModelIndex)));
    connect(ui->myWalletAddress, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemAddress(QModelIndex)));

    QGraphicsDropShadowEffect *effect = new QGraphicsDropShadowEffect;
    effect->setBlurRadius(5);
    effect->setXOffset(5);
    effect->setYOffset(5);
    effect->setColor(Qt::gray);
    ui->detail->setGraphicsEffect(effect);


    QAbstractTableModel *modTab;
    ui->tableView->setModel(modTab); //Устанавливаем модель на TableVeuwe
        ui->tableView->setColumnHidden(3, true);//Скрываем колонку CAN
        ui->tableView->resizeColumnsToContents();//Устанавливаем размер колонок по содержимому
        ui->tableView->verticalHeader()->show();
        ui->tableView->verticalHeader()->setVisible(true);
        ui->tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);
        ui->tableView->show();
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::on_pushButton_clicked()
{
    removeVector();
    Jsonparser *jsp = new Jsonparser();
    qDebug()<<"on button2 clicked!";
    adrText = ui->lineEdit->text();
    jsp->getTXR(adrText,this);
    numTrans =0;
}
void MainWindow::onTXR(QVector<QString> *temp)
{
    Jsonparser *jsp = new Jsonparser();
    qDebug()<<"on tXR";
    for (int i = 0; i < temp->size(); ++i)
    {
        qDebug()<<temp->at(i);

        txData.append(temp->at(i));
    }
    QThread timer;
    timer.sleep(2);

    jsp->getTXS(adrText,this);
}


void MainWindow::onTXS(QVector<QString> *temp)
{
    curTX=0;
    Jsonparser *jsp = new Jsonparser();
    qDebug()<<"on tXS";
    for (int i = 0; i < temp->size(); ++i)
    {
        qDebug()<<temp->at(i);


        QString next;
        next=temp->at(i);

        int n=0;
        for(int j = 0; j<txData.size(); j++)
        {
            if(txData.at(j) == next)
            {
                n=1;
            }
        }

        if(n==0)
        {
            txData.append(next);
        }
    }
    numTX = txData.size();
    numTrans=numTX;
    if(numTX > 0)
    {
        QThread timer;
        timer.sleep(2);
        jsp->getTA(adrText, txData.at(curTX), this);
        curTX++;
    }

}


void MainWindow::onTA(QVector<QString> *tempMyWallet, QVector<QString> *adr, bool inout, QVector<qulonglong> *sum, int date)
{

    Jsonparser *jsp = new Jsonparser();
    qDebug()<<"on TA";
    qDebug()<<"MyWallet";
    if(!inout)
    {
        for(int i=0; i<tempMyWallet->size(); i++)
        {
            int inWallet = 0;
            for(int j=0; j<myWallet.size(); j++)
            {

                if(myWallet.at(j) == tempMyWallet->at(i))
                {
                    inWallet =1;
                }
            }
            if(inWallet == 0)
            {
                myWallet.append(tempMyWallet->at(i));
            }
        }

        for(int i=0; i<adr->size(); i++)
        {
            wallet tempinoutWallet = {};
            tempinoutWallet.adr.append(adr->at(i));
            tempinoutWallet.sum = sum->at(i);
            tempinoutWallet.date=date;
            tempinoutWallet.inout = false;
            //   tempinoutWallet.rectangle = создать сцены и прямоугольники с подписями в них;
            inoutWallet.append(tempinoutWallet);
        }
    }else
    {
wallet tempinoutWallet;
        for(int i=0; i<tempMyWallet->size(); i++)
        {

            tempinoutWallet.adr.append(tempMyWallet->at(i));
            tempinoutWallet.sum = sum->at(0);
            tempinoutWallet.date=date;
            tempinoutWallet.inout = true;
            //tempinoutWallet.rectangle = создать сцены и прямоугольники с подписями в них;


        }
        inoutWallet.append(tempinoutWallet);
    }


    for (int i = 0; i < tempMyWallet->size(); ++i)
    {
        qDebug()<<tempMyWallet->at(i);
    }
    qDebug()<<"adr";
    for (int i = 0; i < adr->size(); ++i)
    {
        qDebug()<<adr->at(i);
    }

    qDebug()<<"inout";
    qDebug()<<inout;
    qDebug()<<"sum";
    qDebug()<<sum;
    qDebug()<<"date";
    qDebug()<<date;



    if(curTX < numTX)
    {
        QThread timer;
        timer.sleep(6);
        jsp->getTA(adrText, txData.at(curTX), this);
        curTX++;
    }else
    {
        paintWallet();
    }
}

void MainWindow::paintWallet()
{

    ui->numTrans->setText(QString::number(numTrans));
    QStringListModel *model = new QStringListModel();
    QStringList list;

    for(int i = 0; i<inoutWallet.size(); i++)
    {

        QDateTime timestamp;
        timestamp.setTime_t(inoutWallet[i].date);
        if(inoutWallet[i].inout)
        {
             list.append(QString("Sum: " + QString::number(inoutWallet[i].sum) + "; \n"+"Date: " + timestamp.toString(Qt::SystemLocaleShortDate)) + "\n");
             inWallet.append(inoutWallet[i]);
        }
    }
    model->setStringList(list);
    ui->listViewIn->setModel(model);
    ui->listViewIn->setEditTriggers(QAbstractItemView::NoEditTriggers);
    connect(ui->listViewIn, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemIN(QModelIndex)));


    QStringListModel *model2 = new QStringListModel();
    QStringList list2;
    for(int i = 0; i<inoutWallet.size(); i++)
    {
        QDateTime timestamp;
        timestamp.setTime_t(inoutWallet[i].date);
        if(!inoutWallet[i].inout)
        {
            list2.append(QString("Sum: " + QString::number(inoutWallet[i].sum) + "; \n"+"Date: " + timestamp.toString(Qt::SystemLocaleShortDate)) + "\n");
            outWallet.append(inoutWallet[i]);
        }
    }
    model2->setStringList(list2);
    ui->listViewOut->setModel(model2);
    ui->listViewOut->setEditTriggers(QAbstractItemView::NoEditTriggers);
    connect(ui->listViewOut, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemOUT(QModelIndex)));

    QStringListModel *model3 = new QStringListModel();
    QStringList list3;
    for(int i=0; i<myWallet.size(); i++)
    {
        list3.append(myWallet[i]);
    }

    model3->setStringList(list3);
    ui->myWalletAddress->setModel(model3);
    ui->myWalletAddress->setEditTriggers(QAbstractItemView::NoEditTriggers);
   // connect(ui->myWalletAddress, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemAddress(QModelIndex)));


}

void MainWindow::showSelectedItemIN(QModelIndex index)
{
    qDebug()<<index.row();
    int i = index.row();
    QStringListModel *model = new QStringListModel();
    QStringList list;
    for(int j=0; j<inWallet[i].adr.size(); j++)
    {
        list.append(inWallet[i].adr[j]);
    }
    model->setStringList(list);
    ui->listView->setModel(model);
    ui->listView->setEditTriggers(QAbstractItemView::NoEditTriggers);
   // connect(ui->listView, SIGNAL(clicked(QModelIndex)),SLOT(showSelectedItemAddress(QModelIndex)));
}
void MainWindow::showSelectedItemOUT(QModelIndex index)
{
    qDebug()<<index.row();
    int i = index.row();
    QStringListModel *model = new QStringListModel();
    QStringList list;
    for(int j=0; j<outWallet[i].adr.size(); j++)
    {
        list.append(outWallet[i].adr[j]);
    }
    model->setStringList(list);
    ui->listView->setModel(model);
    ui->listView->setEditTriggers(QAbstractItemView::NoEditTriggers);


}

void MainWindow::showSelectedItemAddress(QModelIndex index)
{
    QString adr = index.data().toString();

    QString url = "https://www.blocktrail.com/BTC/address/";

    QDesktopServices::openUrl(QUrl(url.append(adr)));
}

void MainWindow::removeVector()
{
    while(inoutWallet.size() != 0) {
          inoutWallet.removeFirst();
     }
    while(inWallet.size() != 0) {
          inWallet.removeFirst();
     }
    while(outWallet.size() != 0) {
          outWallet.removeFirst();
     }
    while(txData.size() != 0) {
          txData.removeFirst();
     }
    while(myWallet.size() != 0) {
          myWallet.removeFirst();
     }

}
